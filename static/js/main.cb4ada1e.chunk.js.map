{"version":3,"sources":["assets/form.png","components/FormComponents/TextField.js","components/FormComponents/CheckboxField.js","components/FormComponents/RadioButtonField.js","components/FormComponents/RadioButtonGroup.js","components/FormComponents/SelectField.js","utils/randomNumber.js","data/countries.js","data/preferences.js","components/SignUp.js","App.js","index.js"],"names":["TextField","label","placeholder","props","useField","field","meta","className","htmlFor","name","touched","error","autoComplete","component","CheckboxField","id","type","checked","value","RadioButtonField","radioClassName","onChange","onBlur","RadioButtonGroup","children","SelectField","options","aria-label","defaultValue","map","option","randomNumber","Math","floor","random","countries","preferences","SignUp","useState","isFormikDataVisible","setFormikDataVisibility","handleFormikDataVisibility","validate","Yup","firstName","max","required","lastName","email","password","min","confirmPassword","oneOf","gender","terms","country","of","title","initialValues","validationSchema","onSubmit","data","setSubmitting","resetForm","setTimeout","alert","console","log","formik","values","errors","arrayHelpers","preference","index","onClick","remove","push","disabled","isSubmitting","JSON","stringify","App","src","formImage","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb4ada1e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/form.4b312c97.png\";","import React from 'react'\nimport { ErrorMessage, useField } from 'formik';\n\nexport const TextField = ({ label,  placeholder, ...props }) => {\n\n    const [field, meta] = useField(props);\n\n    return (\n        <div className=\"mb-2 mt-1\">\n            {label ? (<label htmlFor={field.name}>{label}</label>) : null}\n            <input \n                className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid'}`}\n                placeholder={placeholder}\n                {...field} {...props}\n                autoComplete='off'/>\n            <ErrorMessage component=\"div\" name={field.name} className='error'/>\n        </div>\n    )\n}","import React from 'react'\nimport { ErrorMessage, useField } from 'formik';\n\nexport const CheckboxField = ({ label, id, ...props }) => {\n\n    const [field, meta] = useField(props);\n\n    return (\n        <div className=\"form-check mb-2\">\n            <input \n                className={`form-check-input ${meta.touched && meta.error && 'is-invalid'}`}\n                type=\"checkbox\"\n                id={id}\n                checked={field.value}\n                {...field} {...props} \n            />\n            <label className=\"form-check-label\" htmlFor={id}>{label}</label>\n            <ErrorMessage component=\"div\" name={field.name} className='error'/>\n        </div>\n    )\n}\n    ","import React from 'react'\nimport { useField } from 'formik';\n\n\nexport const RadioButtonField =({\n    id,\n    label,\n    className,\n    ...props\n  }) => {\n    const [field, meta] = useField(props);\n\n    const radioClassName = `form-check-input ${meta.touched && meta.error ? 'is-invalid' : ''}`;\n\n    return (\n      <div className=\"form-check\">\n        <input\n          name={field.name}\n          id={id}\n          type=\"radio\"\n          value={id}\n          checked={id === field.value}\n          onChange={field.onChange}\n          onBlur={field.onBlur}\n          className={radioClassName}\n          {...props}\n        />\n        <label className=\"form-check-label\" htmlFor={id}>{label}</label>\n      </div>\n    );\n  };","import React from 'react'\n\nexport const RadioButtonGroup = ({\n    error,\n    touched,\n    label,\n    children\n  }) => {\n    return (\n      <div className='mb-2'>\n          <label>{label}</label>\n          {children}\n          {touched && error && <div className=\"error\">{error}</div>}\n      </div>\n    );\n  };","import React from 'react'\nimport { ErrorMessage, useField } from 'formik';\n\nexport const SelectField = ({ label, id, options, className, ...props }) => {\n\n    const [field, meta] = useField(props);\n\n    return (\n        <div className={`${className}`}>\n            <label htmlFor={id} className={className ? `${className}-text` : ''}>{label}</label>\n            <select\n                className={`form-select ${meta.touched && meta.error && 'is-invalid'}`}\n                aria-label=\"Select the country\"\n                id={id}\n                {...field} {...props}\n            >\n                <option defaultValue=\"\"></option>\n                {options.map(option => (\n                    <option key={option.id} value={option.value}>{option.label}</option>\n                ))}\n            </select>\n            <ErrorMessage component=\"div\" name={field.name} className='error'/>\n        </div>\n    )\n}","export const randomNumber = () => Math.floor(Math.random() * 11);","export const countries = [\n    { id:\"1\", value: \"BR\", label: \"Brazil\" },\n    { id:\"2\", value: \"CA\", label: \"Canada\" },\n    { id:\"3\", value: \"US\", label: \"United States\" }\n]","export const preferences = [\n    { id:\"1\", value: \"movie\", label: \"Movie\" },\n    { id:\"2\", value: \"magazine\", label: \"Magazine\" },\n    { id:\"3\", value: \"tv-show\", label: \"TV Show\" }\n]","import React, { useState} from 'react'\nimport { Formik, Form, FieldArray } from 'formik';\nimport * as Yup from 'yup'; \nimport { TextField, CheckboxField, RadioButtonField, RadioButtonGroup, SelectField } from './FormComponents';\nimport { randomNumber } from '../utils';\nimport { countries, preferences } from '../data'\n\nexport const SignUp = () => {\n    const [isFormikDataVisible, setFormikDataVisibility] = useState(false);\n    const handleFormikDataVisibility = () => {\n        setFormikDataVisibility(!isFormikDataVisible)\n    }\n    const returnNewPreferenceObject = () => { \n        return { type: '', title: '', id: \"\" + randomNumber() }\n    } \n\n    const validate = Yup.object({\n        firstName: Yup.string()\n            .max(15, 'Must be 15 characters or less')\n            .required('First name is required'),\n        lastName: Yup.string()\n            .max(20, 'Must be 20 characters or less')\n            .required('Last name is required'),\n        email: Yup.string()\n            .email('Not a valid email')\n            .required('Email is required'),\n        password: Yup.string()\n            .min(8, 'Must be at least 8 characters')\n            .required('Password is required'),\n        confirmPassword: Yup.string()\n            .oneOf([Yup.ref('password'), null, 'Passwords must match'])\n            .required('Confirm password is required'),\n        gender: Yup.string().required('Gender is required'),\n        terms: Yup.boolean()\n            .oneOf([true], 'You must accept the terms and conditions to continue'),\n        country: Yup.string().required('Select the country'),\n        preferences: Yup.array().of(Yup.object({\n            title: Yup.string().required('Title is required'),\n            type: Yup.string().required('Type is required'),\n            id: Yup.string().required()\n        })),\n    })\n\n    return (\n        <Formik \n            initialValues={{\n                firstName: '',\n                lastName: '',\n                email: '',\n                password: '',\n                confirmPassword: '',\n                gender: '',\n                terms: false,\n                country: '',\n                preferences: [\n                    {\n                        id: \"\" + randomNumber(),\n                        type: \"\",\n                        title: \"\"\n                    }\n                ]\n            }}\n            validationSchema={validate}\n            onSubmit={( data, { setSubmitting, resetForm }) => {\n                setSubmitting(true);\n                \n                setTimeout(()=> {\n                    alert('Form submitted!');\n\n                    console.log(data);\n\n                    setSubmitting(false);\n                    resetForm();\n                }, 5000);\n\n            }}>\n            {formik => (\n                <>\n                    <div className=\"my-4 font-weight-bold-display-4\"> \n                        <h1>Formik + YUP Validation</h1>\n                        <hr />\n                        <Form>\n                            <TextField label=\"First Name\" name=\"firstName\" type=\"text\" />\n                            <TextField label=\"Last Name\" name=\"lastName\" type=\"text\" />\n                            <TextField label=\"Email\" name=\"email\" type=\"email\" />\n\n                            <RadioButtonGroup\n                                id=\"gender\"\n                                label=\"Gender\"\n                                value={formik.values.gender}\n                                error={formik.errors.gender}\n                                touched={formik.touched.gender}\n                            >\n                                <RadioButtonField label=\"Male\" name=\"gender\" id=\"male\" />\n                                <RadioButtonField label=\"Female\" name=\"gender\" id=\"female\"  />\n                            </RadioButtonGroup>\n\n                            <SelectField label=\"Country\" id=\"country\" name=\"country\" options={countries} />\n\n                            <FieldArray name=\"preferences\">\n                                {arrayHelpers => (\n                                    <div className=\"container border border-1 mt-3 mb-3\">\n                                        <label className=\"mb-2 mt-2\">Choose your preferences</label>\n                                        {formik.values.preferences.map((preference, index) => {\n                                            return (\n                                                <div key={index}>\n                                                    <SelectField \n                                                        id={preference.id} \n                                                        className=\"input-group\" \n                                                        label=\"Preference\" \n                                                        name={`preferences.${index}.type`} \n                                                        options={preferences} \n                                                    />\n                                                    <TextField name={`preferences.${index}.title`} placeholder=\"Type your preference\" type=\"text\" />\n\n                                                    <button\n                                                        className=\"btn btn-danger btn-sm ml-3 mb-3 \"\n                                                        onClick={() => index > 0 && arrayHelpers.remove(index)} \n                                                        type=\"button\">\n                                                        - preference\n                                                    </button>  \n                                                </div>\n                                            )\n                                        })}                                    \n                                        \n                                        <button\n                                            className=\"btn btn-secondary btn-sm mb-3 \"\n                                            onClick={() => arrayHelpers.push(returnNewPreferenceObject())} \n                                            type=\"button\">\n                                            + preference\n                                        </button>\n                                    </div>\n                                )}\n                            </FieldArray>\n\n                            <TextField label=\"Password\" name=\"password\" type=\"password\" />\n                            <TextField label=\"Confirm Password\" name=\"confirmPassword\" type=\"password\" />\n\n                            <CheckboxField label=\"I agree to the terms and conditions\" name=\"terms\" id=\"terms\" />\n\n                            <button className=\"btn btn-dark mt-3 me-1\" type=\"submit\" disabled={formik.isSubmitting}>{!formik.isSubmitting ? 'Register' : 'Registering...'}</button>\n                            <button className=\"btn btn-danger mt-3 me-1\" disabled={formik.isSubmitting} type=\"reset\">Reset</button>\n                            <button className=\"btn btn-primary mt-3 \" onClick={handleFormikDataVisibility} type=\"button\">{!isFormikDataVisible ? 'Show Formik Data' : 'Hide Formik Data'}</button>\n                        </Form>\n                    </div>\n                    <div>\n                        { !isFormikDataVisible ? null : (\n                            <pre>{JSON.stringify(formik, null, 2)}</pre> \n                        )}\n                    </div>\n                </>\n            )}\n        </Formik>\n    )\n}\n","import './App.css';\nimport formImage from './assets/form.png'\nimport { SignUp } from './components/SignUp';\n\nfunction App() {\n  return (\n    <div className=\"container mt-3\">\n      <div className=\"row\">\n        <div className=\"col-md-5\">\n          <SignUp />\n        </div>\n        <div className=\"col-md-7\">\n          <img className=\"img-fluid w-100\" src={formImage} alt=\"Form\" />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}